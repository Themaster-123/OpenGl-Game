#version 430

const int edgeTable[256] = {
0x0  , 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,
0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,
0x190, 0x99 , 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,
0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,
0x230, 0x339, 0x33 , 0x13a, 0x636, 0x73f, 0x435, 0x53c,
0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,
0x3a0, 0x2a9, 0x1a3, 0xaa , 0x7a6, 0x6af, 0x5a5, 0x4ac,
0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,
0x460, 0x569, 0x663, 0x76a, 0x66 , 0x16f, 0x265, 0x36c,
0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,
0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff , 0x3f5, 0x2fc,
0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,
0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55 , 0x15c,
0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc ,
0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,
0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,
0xcc , 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,
0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,
0x15c, 0x55 , 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,
0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,
0x2fc, 0x3f5, 0xff , 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,
0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,
0x36c, 0x265, 0x16f, 0x66 , 0x76a, 0x663, 0x569, 0x460,
0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,
0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa , 0x1a3, 0x2a9, 0x3a0,
0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,
0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33 , 0x339, 0x230,
0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,
0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99 , 0x190,
0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,
0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0 };



struct Voxel {
	vec4 pos;
	float value;
};

layout(local_size_x = 1, local_size_z = 1, local_size_z = 1) in;

uniform ivec3 size;

uniform float isoLevel;

layout(binding = 3) uniform atomic_uint counter;

layout(std430, binding = 0) readonly buffer InputBuffer {
	Voxel[] voxels;
};

layout(std430, binding = 1) writeonly buffer GeomBuffer {
	vec4 positions[];
};

layout(std430, binding = 2) readonly buffer IndexTableBuffer {
	int indexTable[256][16];
};

int voxelIndex(ivec3 pos) {
	return pos.x + size.x * pos.y * size.x * size.y * pos.z;
}

ivec3 voxelPos(uint index) {
	uint z = index / (size.x * size.y);
	uint idx = index - (z * size.x * size.y);
	uint y = idx / size.x;
	uint x = idx % size.x;
	
	return ivec3(x, y, z);
}

Voxel getVoxel(ivec3 pos) {
	return voxels[voxelIndex(pos)];
}

vec3 interpolateVertexPosition(Voxel voxel1, Voxel voxel2) {
	vec3 pos;

	if (abs(isoLevel - voxel1.value) < 0.00001)
		return voxel1.pos.xyz;
	if (abs(isoLevel - voxel2.value) < 0.00001)
		return voxel2.pos.xyz;
	if (abs(voxel1.value - voxel2.value) < 0.00001)
		return voxel1.pos.xyz;
	float mu = (isoLevel - voxel1.value) / (voxel2.value - voxel1.value);
	pos.x = voxel1.pos.x + mu * (voxel2.pos.x - voxel1.pos.x);
	pos.y = voxel1.pos.y + mu * (voxel2.pos.y - voxel1.pos.y);
	pos.z = voxel1.pos.z + mu * (voxel2.pos.z - voxel1.pos.z);

	return pos;
}

void triangulateCell(Voxel voxel0, Voxel voxel1, Voxel voxel2, Voxel voxel3, Voxel voxel4, Voxel voxel5, Voxel voxel6, Voxel voxel7) {
	int cubeIndex = 0;
	vec3 verticesArray[12];

	if (voxel0.value < isoLevel) cubeIndex |= 1;
	if (voxel1.value < isoLevel) cubeIndex |= 2;
	if (voxel2.value < isoLevel) cubeIndex |= 4;
	if (voxel3.value < isoLevel) cubeIndex |= 8;
	if (voxel4.value < isoLevel) cubeIndex |= 16;
	if (voxel5.value < isoLevel) cubeIndex |= 32;
	if (voxel6.value < isoLevel) cubeIndex |= 64;
	if (voxel7.value < isoLevel) cubeIndex |= 128;

	if (edgeTable[cubeIndex] == 0) return;

	if ((edgeTable[cubeIndex] & 1) != 0) verticesArray[0] = interpolateVertexPosition(voxel0, voxel1);
	if ((edgeTable[cubeIndex] & 2) != 0) verticesArray[1] = interpolateVertexPosition(voxel1, voxel2);
	if ((edgeTable[cubeIndex] & 4) != 0) verticesArray[2] = interpolateVertexPosition(voxel2, voxel3);
	if ((edgeTable[cubeIndex] & 8) != 0) verticesArray[3] = interpolateVertexPosition(voxel3, voxel0);
	if ((edgeTable[cubeIndex] & 16) != 0) verticesArray[4] = interpolateVertexPosition(voxel4, voxel5);
	if ((edgeTable[cubeIndex] & 32) != 0) verticesArray[5] = interpolateVertexPosition(voxel5, voxel6);
	if ((edgeTable[cubeIndex] & 64) != 0) verticesArray[6] = interpolateVertexPosition(voxel6, voxel7);
	if ((edgeTable[cubeIndex] & 128) != 0) verticesArray[7] = interpolateVertexPosition(voxel7, voxel4);
	if ((edgeTable[cubeIndex] & 256) != 0) verticesArray[8] = interpolateVertexPosition(voxel0, voxel4);
	if ((edgeTable[cubeIndex] & 512) != 0) verticesArray[9] = interpolateVertexPosition(voxel1, voxel5);
	if ((edgeTable[cubeIndex] & 1024) != 0) verticesArray[10] = interpolateVertexPosition(voxel2, voxel6);
	if ((edgeTable[cubeIndex] & 2048) != 0) verticesArray[11] = interpolateVertexPosition(voxel3, voxel7);

	for (int i = 0; indexTable[cubeIndex][i] != -1; i += 3) {
		uint count = atomicCounterIncrement(counter);

		if (count > positions.length()) return;

		uint vertIndex = count * 3;
		positions[vertIndex] = vec4(verticesArray[indexTable[cubeIndex][i]], 0);
		positions[vertIndex + 1] = vec4(verticesArray[indexTable[cubeIndex][i + 1]], 0);
		positions[vertIndex + 2] = vec4(verticesArray[indexTable[cubeIndex][i + 2]], 0);
	}
}

void main() {

	if (gl_GlobalInvocationID.x >= size.x - 1 || gl_GlobalInvocationID.y >= size.y - 1 || gl_GlobalInvocationID.z >= size.z - 1) return;

	ivec3 pos = voxelPos(gl_GlobalInvocationID.x);
	uint count = atomicCounterIncrement(counter);

	if (count > positions.length()) return;

	positions[count] = vec4(0, getVoxel(pos).value, 0, 0);
	triangulateCell(getVoxel(pos + ivec3(1, 0, 0)), getVoxel(pos + ivec3(1, 0, 1)), getVoxel(pos + ivec3(0, 0, 1)), getVoxel(pos + ivec3(0, 0, 0)), 
		getVoxel(pos + ivec3(1, 1, 0)), getVoxel(pos + ivec3(1, 1, 1)), getVoxel(pos + ivec3(0, 1, 1)), getVoxel(pos + ivec3(0, 1, 0)));
}